[tool.poetry]
name = "pytest-spec"
version = "4.0.0"
description = "Library pytest-spec is a pytest plugin to display test execution output like a SPECIFICATION."
readme = "README.md"
authors = ["Pawel Chomicki <pawel.chomicki@gmail.com>"]
license = "GPL-2.0-or-later"
homepage = "https://github.com/pchomik/pytest-spec"
repository = "https://github.com/pchomik/pytest-spec"
keywords = ["pytest", "test", "unittest", "spec"]
classifiers = [
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities"
]
packages = [
    { include = "pytest_spec" },
    { include = "test", format = "sdist" },
]
include = ["LICENSE.txt"]

[tool.poetry.dependencies]
python = ">=3.7"

[tool.poetry.dev-dependencies]
pytest = "*"
pytest-describe = "*"
wheel = "*"
twine = "*"

[tool.black]
line-length = 150
skip-string-normalization = true

[tool.ruff]
select = [
  "B",     # flake8-bugbear
  "C",     # complexity
  "E",     # pycodestyle
  "F",     # pyflakes/autoflake
  "I",     # isort
  "PIE",   # flake8-pie
  "W",     # pycodestyle
  "TID",   # flake-tidy-imports
]

line-length = 150
target-version = "py37"
exclude = [
  "tests"
]

unfixable = ["B", "C", "D", "E", "F", "PIE", "W", "TID"]
fixable = ["I"]
ignore = [
    "C901",
    "C408"
]

[tool.ruff.pydocstyle]
convention = "google"


[tool.ruff.per-file-ignores]
"ute_ca_agentctl/utils/logging/formatters.py" = ["C901"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.poetry.plugins.pytest11]
pytest_spec = "pytest_spec.plugin"

[tool.poetry2conda]
name = "pytest-spec-env"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
